# Pick any authentication method
# anyauth

# Append to target file when uploading
# append

# Use HTTP Basic Authentication
# basic

# Maximum time allowed for the connection
# connect-timeout=5

# Resumed transfer offset
# continue-at=-1

# Create necessary local directory hierarchy
# create-dirs

# Covert LF to CRLF in upload
crlf

# HTTP POST data
# data=@

# Write the received headers to <filename>
# dump-header=curl_headers.txt

# Put the post data in the URL and use GET
# get

# Show document info only
# head

# Pass custom header(s) to server
# header=

# Use HTTP 1.1
http1.1

# Ignore Content-Length header
# ignore-content-length

# Include protocol headers in the output
include

# Interval time for keepalive probes
# keepalive-time=2

# Limit transfer rate to RATE
# limit-rate=1000k

# Disable buffering of the output stream
# no-buffer

# Disable TCP keepalive on the connection
# no-keepalive

# Write to a file instead of stdout
# output=<filename>

# Display a progress bar
# progress-bar

# Send command(s) to server before the transfer
# quote=

# File for randomly generated read data
# random-file=<filename>

# Request command to use
# request=

# Request target for this request
# request-target=

# Where to write stderr
# stderr=curl_error.txt

# Enabled styled output for HTTP headers
styled-output

# Use the TCP_NODELAY option
tcp-nodelay

# Write a debug trace to FILE
# trace=curl_trace.txt

# Write trace in ASCII and hex
trace-ascii=curl_trace.txt

# Add time stamps to trace/verbose output
trace-time

# # Transfer local FILE to destination
# upload-file=<filename>
